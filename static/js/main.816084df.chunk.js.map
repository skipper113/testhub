{"version":3,"sources":["Home/Home.jsx","useChat.js","ChatRoom/ChatRoom.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","React","useState","roomName","setRoomName","className","type","placeholder","value","onChange","event","target","to","useChat","roomId","messages","setMessages","socketRef","useRef","useEffect","current","socketIOClient","query","on","message","incomingMessage","ownedByCurrentUser","senderId","id","disconnect","sendMessage","messageBody","emit","body","ChatRoom","props","match","params","newMessage","setNewMessage","map","i","key","onClick","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"6TA4BeA,G,MAvBF,WAAO,IAAD,EACeC,IAAMC,SAAS,IAD9B,mBACVC,EADU,KACAC,EADA,KAOjB,OACE,yBAAKC,UAAU,kBACb,2BACEC,KAAK,OACLC,YAAY,OACZC,MAAOL,EACPM,SAVuB,SAACC,GAC5BN,EAAYM,EAAMC,OAAOH,QAUrBH,UAAU,qBAEZ,kBAAC,IAAD,CAAMO,GAAE,WAAMT,GAAYE,UAAU,qBAApC,gB,yCCiBSQ,EAhCC,SAACC,GAAY,IAAD,EACMZ,mBAAS,IADf,mBACnBa,EADmB,KACTC,EADS,KAEpBC,EAAYC,mBAElBC,qBAAU,WAaR,OAZAF,EAAUG,QAAUC,IAPE,kDAOgC,CACpDC,MAAO,CAAER,YAGXG,EAAUG,QAAQG,GAZS,kBAYkB,SAACC,GAC5C,IAAMC,EAAe,2BAChBD,GADgB,IAEnBE,mBAAoBF,EAAQG,WAAaV,EAAUG,QAAQQ,KAE7DZ,GAAY,SAACD,GAAD,4BAAkBA,GAAlB,CAA4BU,UAGnC,WACLR,EAAUG,QAAQS,gBAEnB,CAACf,IASJ,MAAO,CAAEC,WAAUe,YAPC,SAACC,GACnBd,EAAUG,QAAQY,KA1BS,iBA0BoB,CAC7CC,KAAMF,EACNJ,SAAUV,EAAUG,QAAQQ,QCkBnBM,EA5CE,SAACC,GAAW,IACnBrB,EAAWqB,EAAMC,MAAMC,OAAvBvB,OADkB,EAEQD,EAAQC,GAAlCC,EAFkB,EAElBA,SAAUe,EAFQ,EAERA,YAFQ,EAGU7B,IAAMC,SAAS,IAHzB,mBAGnBoC,EAHmB,KAGPC,EAHO,KAc1B,OACE,yBAAKlC,UAAU,uBACb,wBAAIA,UAAU,aAAd,SAAiCS,GACjC,yBAAKT,UAAU,sBACb,wBAAIA,UAAU,iBACXU,EAASyB,KAAI,SAAChB,EAASiB,GAAV,OACZ,wBACEC,IAAKD,EACLpC,UAAS,uBACPmB,EAAQE,mBAAqB,aAAe,qBAG7CF,EAAQS,WAKjB,8BACEzB,MAAO8B,EACP7B,SA5ByB,SAACC,GAC9B6B,EAAc7B,EAAMC,OAAOH,QA4BvBD,YAAY,mBACZF,UAAU,4BAEZ,4BAAQsC,QA5Bc,WACxBb,EAAYQ,GACZC,EAAc,KA0BwBlC,UAAU,uBAA9C,UCxBSuC,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/C,IACjC,kBAAC,IAAD,CAAO6C,OAAK,EAACC,KAAK,WAAWC,UAAWb,OCA5Bc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASf,MACvB,2DCZNgB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMxC,c","file":"static/js/main.816084df.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Home.css\";\n\nconst Home = () => {\n  const [roomName, setRoomName] = React.useState(\"\");\n\n  const handleRoomNameChange = (event) => {\n    setRoomName(event.target.value);\n  };\n\n  return (\n    <div className=\"home-container\">\n      <input\n        type=\"text\"\n        placeholder=\"Room\"\n        value={roomName}\n        onChange={handleRoomNameChange}\n        className=\"text-input-field\"\n      />\n      <Link to={`/${roomName}`} className=\"enter-room-button\">\n        Join room\n      </Link>\n    </div>\n  );\n};\n\nexport default Home;\n","import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\nconst SOCKET_SERVER_URL = \"https://intense-plains-14375.herokuapp.com:4000\";\n\nconst useChat = (roomId) => {\n  const [messages, setMessages] = useState([]);\n  const socketRef = useRef();\n\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: { roomId },\n    });\n\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id,\n      };\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n\n  const sendMessage = (messageBody) => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n    });\n  };\n\n  return { messages, sendMessage };\n};\n\nexport default useChat;\n","import React from \"react\";\n\nimport \"./ChatRoom.css\";\nimport useChat from \"../useChat\";\n\nconst ChatRoom = (props) => {\n  const { roomId } = props.match.params;\n  const { messages, sendMessage } = useChat(roomId);\n  const [newMessage, setNewMessage] = React.useState(\"\");\n\n  const handleNewMessageChange = (event) => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleSendMessage = () => {\n    sendMessage(newMessage);\n    setNewMessage(\"\");\n  };\n\n  return (\n    <div className=\"chat-room-container\">\n      <h1 className=\"room-name\">Room: {roomId}</h1>\n      <div className=\"messages-container\">\n        <ol className=\"messages-list\">\n          {messages.map((message, i) => (\n            <li\n              key={i}\n              className={`message-item ${\n                message.ownedByCurrentUser ? \"my-message\" : \"received-message\"\n              }`}\n            >\n              {message.body}\n            </li>\n          ))}\n        </ol>\n      </div>\n      <textarea\n        value={newMessage}\n        onChange={handleNewMessageChange}\n        placeholder=\"Write message...\"\n        className=\"new-message-input-field\"\n      />\n      <button onClick={handleSendMessage} className=\"send-message-button\">\n        Send\n      </button>\n    </div>\n  );\n};\n\nexport default ChatRoom;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport Home from \"./Home/Home\";\nimport ChatRoom from \"./ChatRoom/ChatRoom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/:roomId\" component={ChatRoom} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}